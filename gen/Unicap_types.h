/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Unicap_TYPES_H
#define Unicap_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ntu { namespace cap {

struct KeyPartitionAlgo {
  enum type {
    Hashing = 1,
    Range = 2
  };
};

extern const std::map<int, const char*> _KeyPartitionAlgo_VALUES_TO_NAMES;

class KeyPartition;

class TaskTrackerInfo;

class TableProperty;

typedef struct _KeyPartition__isset {
  _KeyPartition__isset() : key_to_shard(false) {}
  bool key_to_shard :1;
} _KeyPartition__isset;

class KeyPartition {
 public:

  static const char* ascii_fingerprint; // = "652978FE52A8D7F6DACE48CF7F5C13D0";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x29,0x78,0xFE,0x52,0xA8,0xD7,0xF6,0xDA,0xCE,0x48,0xCF,0x7F,0x5C,0x13,0xD0};

  KeyPartition(const KeyPartition&);
  KeyPartition& operator=(const KeyPartition&);
  KeyPartition() : partition_algo((KeyPartitionAlgo::type)0) {
  }

  virtual ~KeyPartition() throw();
  KeyPartitionAlgo::type partition_algo;
  std::map<int64_t, int64_t>  key_to_shard;

  _KeyPartition__isset __isset;

  void __set_partition_algo(const KeyPartitionAlgo::type val);

  void __set_key_to_shard(const std::map<int64_t, int64_t> & val);

  bool operator == (const KeyPartition & rhs) const
  {
    if (!(partition_algo == rhs.partition_algo))
      return false;
    if (__isset.key_to_shard != rhs.__isset.key_to_shard)
      return false;
    else if (__isset.key_to_shard && !(key_to_shard == rhs.key_to_shard))
      return false;
    return true;
  }
  bool operator != (const KeyPartition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyPartition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const KeyPartition& obj);
};

void swap(KeyPartition &a, KeyPartition &b);


class TaskTrackerInfo {
 public:

  static const char* ascii_fingerprint; // = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

  TaskTrackerInfo(const TaskTrackerInfo&);
  TaskTrackerInfo& operator=(const TaskTrackerInfo&);
  TaskTrackerInfo() : host_name(), port(0) {
  }

  virtual ~TaskTrackerInfo() throw();
  std::string host_name;
  int64_t port;

  void __set_host_name(const std::string& val);

  void __set_port(const int64_t val);

  bool operator == (const TaskTrackerInfo & rhs) const
  {
    if (!(host_name == rhs.host_name))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const TaskTrackerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskTrackerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TaskTrackerInfo& obj);
};

void swap(TaskTrackerInfo &a, TaskTrackerInfo &b);


class TableProperty {
 public:

  static const char* ascii_fingerprint; // = "74A6098C9F090F065DDB85EB7445B842";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0xA6,0x09,0x8C,0x9F,0x09,0x0F,0x06,0x5D,0xDB,0x85,0xEB,0x74,0x45,0xB8,0x42};

  TableProperty(const TableProperty&);
  TableProperty& operator=(const TableProperty&);
  TableProperty() : table_name(), table_type(), shard_num(0) {
  }

  virtual ~TableProperty() throw();
  std::string table_name;
  std::string table_type;
  int64_t shard_num;
  std::vector<int64_t>  shard_id_in_charge;
  std::map<int64_t, int64_t>  all_shard_location;
  KeyPartition key_partition;

  void __set_table_name(const std::string& val);

  void __set_table_type(const std::string& val);

  void __set_shard_num(const int64_t val);

  void __set_shard_id_in_charge(const std::vector<int64_t> & val);

  void __set_all_shard_location(const std::map<int64_t, int64_t> & val);

  void __set_key_partition(const KeyPartition& val);

  bool operator == (const TableProperty & rhs) const
  {
    if (!(table_name == rhs.table_name))
      return false;
    if (!(table_type == rhs.table_type))
      return false;
    if (!(shard_num == rhs.shard_num))
      return false;
    if (!(shard_id_in_charge == rhs.shard_id_in_charge))
      return false;
    if (!(all_shard_location == rhs.all_shard_location))
      return false;
    if (!(key_partition == rhs.key_partition))
      return false;
    return true;
  }
  bool operator != (const TableProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TableProperty& obj);
};

void swap(TableProperty &a, TableProperty &b);

}} // namespace

#endif
