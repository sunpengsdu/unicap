/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TaskTracker.h"

namespace ntu {
namespace cap {


TaskTracker_ping_args::~TaskTracker_ping_args() throw() {
}


uint32_t TaskTracker_ping_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        xfer += iprot->skip(ftype);
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_ping_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_ping_args");

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_ping_pargs::~TaskTracker_ping_pargs() throw() {
}


uint32_t TaskTracker_ping_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_ping_pargs");

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_ping_result::~TaskTracker_ping_result() throw() {
}


uint32_t TaskTracker_ping_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_ping_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_ping_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
        xfer += oprot->writeString(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_ping_presult::~TaskTracker_ping_presult() throw() {
}


uint32_t TaskTracker_ping_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_create_table_args::~TaskTracker_create_table_args() throw() {
}


uint32_t TaskTracker_create_table_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->table_property.read(iprot);
                this->__isset.table_property = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_create_table_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_create_table_args");

    xfer += oprot->writeFieldBegin("table_property", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->table_property.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_create_table_pargs::~TaskTracker_create_table_pargs() throw() {
}


uint32_t TaskTracker_create_table_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_create_table_pargs");

    xfer += oprot->writeFieldBegin("table_property", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += (*(this->table_property)).write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_create_table_result::~TaskTracker_create_table_result() throw() {
}


uint32_t TaskTracker_create_table_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_create_table_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_create_table_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_create_table_presult::~TaskTracker_create_table_presult() throw() {
}


uint32_t TaskTracker_create_table_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_create_cf_args::~TaskTracker_create_cf_args() throw() {
}


uint32_t TaskTracker_create_cf_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_STRUCT) {
                xfer += this->cf_property.read(iprot);
                this->__isset.cf_property = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_create_cf_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_create_cf_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_property", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->cf_property.write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_create_cf_pargs::~TaskTracker_create_cf_pargs() throw() {
}


uint32_t TaskTracker_create_cf_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_create_cf_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_property", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += (*(this->cf_property)).write(oprot);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_create_cf_result::~TaskTracker_create_cf_result() throw() {
}


uint32_t TaskTracker_create_cf_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_create_cf_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_create_cf_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_create_cf_presult::~TaskTracker_create_cf_presult() throw() {
}


uint32_t TaskTracker_create_cf_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_put_int_args::~TaskTracker_vector_put_int_args() throw() {
}


uint32_t TaskTracker_vector_put_int_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size64;
                    ::apache::thrift::protocol::TType _etype67;
                    xfer += iprot->readListBegin(_etype67, _size64);
                    this->row_key.resize(_size64);
                    uint32_t _i68;
                    for (_i68 = 0; _i68 < _size64; ++_i68) {
                        xfer += iprot->readString(this->row_key[_i68]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size69;
                    ::apache::thrift::protocol::TType _etype72;
                    xfer += iprot->readListBegin(_etype72, _size69);
                    this->column_key.resize(_size69);
                    uint32_t _i73;
                    for (_i73 = 0; _i73 < _size69; ++_i73) {
                        xfer += iprot->readString(this->column_key[_i73]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size74;
                    ::apache::thrift::protocol::TType _etype77;
                    xfer += iprot->readListBegin(_etype77, _size74);
                    this->value.resize(_size74);
                    uint32_t _i78;
                    for (_i78 = 0; _i78 < _size74; ++_i78) {
                        xfer += iprot->readI64(this->value[_i78]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_put_int_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_put_int_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter79;
        for (_iter79 = this->row_key.begin(); _iter79 != this->row_key.end(); ++_iter79) {
            xfer += oprot->writeString((*_iter79));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter80;
        for (_iter80 = this->column_key.begin(); _iter80 != this->column_key.end(); ++_iter80) {
            xfer += oprot->writeString((*_iter80));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->value.size()));
        std::vector<int64_t> ::const_iterator _iter81;
        for (_iter81 = this->value.begin(); _iter81 != this->value.end(); ++_iter81) {
            xfer += oprot->writeI64((*_iter81));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_put_int_pargs::~TaskTracker_vector_put_int_pargs() throw() {
}


uint32_t TaskTracker_vector_put_int_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_put_int_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter82;
        for (_iter82 = (*(this->row_key)).begin(); _iter82 != (*(this->row_key)).end(); ++_iter82) {
            xfer += oprot->writeString((*_iter82));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter83;
        for (_iter83 = (*(this->column_key)).begin(); _iter83 != (*(this->column_key)).end(); ++_iter83) {
            xfer += oprot->writeString((*_iter83));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<int64_t> ::const_iterator _iter84;
        for (_iter84 = (*(this->value)).begin(); _iter84 != (*(this->value)).end(); ++_iter84) {
            xfer += oprot->writeI64((*_iter84));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_put_int_result::~TaskTracker_vector_put_int_result() throw() {
}


uint32_t TaskTracker_vector_put_int_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_put_int_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_put_int_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_put_int_presult::~TaskTracker_vector_put_int_presult() throw() {
}


uint32_t TaskTracker_vector_put_int_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_put_double_args::~TaskTracker_vector_put_double_args() throw() {
}


uint32_t TaskTracker_vector_put_double_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size85;
                    ::apache::thrift::protocol::TType _etype88;
                    xfer += iprot->readListBegin(_etype88, _size85);
                    this->row_key.resize(_size85);
                    uint32_t _i89;
                    for (_i89 = 0; _i89 < _size85; ++_i89) {
                        xfer += iprot->readString(this->row_key[_i89]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size90;
                    ::apache::thrift::protocol::TType _etype93;
                    xfer += iprot->readListBegin(_etype93, _size90);
                    this->column_key.resize(_size90);
                    uint32_t _i94;
                    for (_i94 = 0; _i94 < _size90; ++_i94) {
                        xfer += iprot->readString(this->column_key[_i94]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size95;
                    ::apache::thrift::protocol::TType _etype98;
                    xfer += iprot->readListBegin(_etype98, _size95);
                    this->value.resize(_size95);
                    uint32_t _i99;
                    for (_i99 = 0; _i99 < _size95; ++_i99) {
                        xfer += iprot->readDouble(this->value[_i99]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_put_double_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_put_double_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter100;
        for (_iter100 = this->row_key.begin(); _iter100 != this->row_key.end(); ++_iter100) {
            xfer += oprot->writeString((*_iter100));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter101;
        for (_iter101 = this->column_key.begin(); _iter101 != this->column_key.end(); ++_iter101) {
            xfer += oprot->writeString((*_iter101));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->value.size()));
        std::vector<double> ::const_iterator _iter102;
        for (_iter102 = this->value.begin(); _iter102 != this->value.end(); ++_iter102) {
            xfer += oprot->writeDouble((*_iter102));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_put_double_pargs::~TaskTracker_vector_put_double_pargs() throw() {
}


uint32_t TaskTracker_vector_put_double_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_put_double_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter103;
        for (_iter103 = (*(this->row_key)).begin(); _iter103 != (*(this->row_key)).end(); ++_iter103) {
            xfer += oprot->writeString((*_iter103));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter104;
        for (_iter104 = (*(this->column_key)).begin(); _iter104 != (*(this->column_key)).end(); ++_iter104) {
            xfer += oprot->writeString((*_iter104));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<double> ::const_iterator _iter105;
        for (_iter105 = (*(this->value)).begin(); _iter105 != (*(this->value)).end(); ++_iter105) {
            xfer += oprot->writeDouble((*_iter105));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_put_double_result::~TaskTracker_vector_put_double_result() throw() {
}


uint32_t TaskTracker_vector_put_double_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_put_double_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_put_double_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_put_double_presult::~TaskTracker_vector_put_double_presult() throw() {
}


uint32_t TaskTracker_vector_put_double_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_put_string_args::~TaskTracker_vector_put_string_args() throw() {
}


uint32_t TaskTracker_vector_put_string_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size106;
                    ::apache::thrift::protocol::TType _etype109;
                    xfer += iprot->readListBegin(_etype109, _size106);
                    this->row_key.resize(_size106);
                    uint32_t _i110;
                    for (_i110 = 0; _i110 < _size106; ++_i110) {
                        xfer += iprot->readString(this->row_key[_i110]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size111;
                    ::apache::thrift::protocol::TType _etype114;
                    xfer += iprot->readListBegin(_etype114, _size111);
                    this->column_key.resize(_size111);
                    uint32_t _i115;
                    for (_i115 = 0; _i115 < _size111; ++_i115) {
                        xfer += iprot->readString(this->column_key[_i115]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size116;
                    ::apache::thrift::protocol::TType _etype119;
                    xfer += iprot->readListBegin(_etype119, _size116);
                    this->value.resize(_size116);
                    uint32_t _i120;
                    for (_i120 = 0; _i120 < _size116; ++_i120) {
                        xfer += iprot->readString(this->value[_i120]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_put_string_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_put_string_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter121;
        for (_iter121 = this->row_key.begin(); _iter121 != this->row_key.end(); ++_iter121) {
            xfer += oprot->writeString((*_iter121));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter122;
        for (_iter122 = this->column_key.begin(); _iter122 != this->column_key.end(); ++_iter122) {
            xfer += oprot->writeString((*_iter122));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->value.size()));
        std::vector<std::string> ::const_iterator _iter123;
        for (_iter123 = this->value.begin(); _iter123 != this->value.end(); ++_iter123) {
            xfer += oprot->writeString((*_iter123));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_put_string_pargs::~TaskTracker_vector_put_string_pargs() throw() {
}


uint32_t TaskTracker_vector_put_string_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_put_string_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter124;
        for (_iter124 = (*(this->row_key)).begin(); _iter124 != (*(this->row_key)).end(); ++_iter124) {
            xfer += oprot->writeString((*_iter124));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter125;
        for (_iter125 = (*(this->column_key)).begin(); _iter125 != (*(this->column_key)).end(); ++_iter125) {
            xfer += oprot->writeString((*_iter125));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<std::string> ::const_iterator _iter126;
        for (_iter126 = (*(this->value)).begin(); _iter126 != (*(this->value)).end(); ++_iter126) {
            xfer += oprot->writeString((*_iter126));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_put_string_result::~TaskTracker_vector_put_string_result() throw() {
}


uint32_t TaskTracker_vector_put_string_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_put_string_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_put_string_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_put_string_presult::~TaskTracker_vector_put_string_presult() throw() {
}


uint32_t TaskTracker_vector_put_string_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_merge_int_args::~TaskTracker_vector_merge_int_args() throw() {
}


uint32_t TaskTracker_vector_merge_int_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size127;
                    ::apache::thrift::protocol::TType _etype130;
                    xfer += iprot->readListBegin(_etype130, _size127);
                    this->row_key.resize(_size127);
                    uint32_t _i131;
                    for (_i131 = 0; _i131 < _size127; ++_i131) {
                        xfer += iprot->readString(this->row_key[_i131]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size132;
                    ::apache::thrift::protocol::TType _etype135;
                    xfer += iprot->readListBegin(_etype135, _size132);
                    this->column_key.resize(_size132);
                    uint32_t _i136;
                    for (_i136 = 0; _i136 < _size132; ++_i136) {
                        xfer += iprot->readString(this->column_key[_i136]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size137;
                    ::apache::thrift::protocol::TType _etype140;
                    xfer += iprot->readListBegin(_etype140, _size137);
                    this->value.resize(_size137);
                    uint32_t _i141;
                    for (_i141 = 0; _i141 < _size137; ++_i141) {
                        xfer += iprot->readI64(this->value[_i141]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_merge_int_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_int_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter142;
        for (_iter142 = this->row_key.begin(); _iter142 != this->row_key.end(); ++_iter142) {
            xfer += oprot->writeString((*_iter142));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter143;
        for (_iter143 = this->column_key.begin(); _iter143 != this->column_key.end(); ++_iter143) {
            xfer += oprot->writeString((*_iter143));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->value.size()));
        std::vector<int64_t> ::const_iterator _iter144;
        for (_iter144 = this->value.begin(); _iter144 != this->value.end(); ++_iter144) {
            xfer += oprot->writeI64((*_iter144));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_merge_int_pargs::~TaskTracker_vector_merge_int_pargs() throw() {
}


uint32_t TaskTracker_vector_merge_int_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_int_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter145;
        for (_iter145 = (*(this->row_key)).begin(); _iter145 != (*(this->row_key)).end(); ++_iter145) {
            xfer += oprot->writeString((*_iter145));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter146;
        for (_iter146 = (*(this->column_key)).begin(); _iter146 != (*(this->column_key)).end(); ++_iter146) {
            xfer += oprot->writeString((*_iter146));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<int64_t> ::const_iterator _iter147;
        for (_iter147 = (*(this->value)).begin(); _iter147 != (*(this->value)).end(); ++_iter147) {
            xfer += oprot->writeI64((*_iter147));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_merge_int_result::~TaskTracker_vector_merge_int_result() throw() {
}


uint32_t TaskTracker_vector_merge_int_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_merge_int_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_int_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_merge_int_presult::~TaskTracker_vector_merge_int_presult() throw() {
}


uint32_t TaskTracker_vector_merge_int_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_merge_double_args::~TaskTracker_vector_merge_double_args() throw() {
}


uint32_t TaskTracker_vector_merge_double_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size148;
                    ::apache::thrift::protocol::TType _etype151;
                    xfer += iprot->readListBegin(_etype151, _size148);
                    this->row_key.resize(_size148);
                    uint32_t _i152;
                    for (_i152 = 0; _i152 < _size148; ++_i152) {
                        xfer += iprot->readString(this->row_key[_i152]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size153;
                    ::apache::thrift::protocol::TType _etype156;
                    xfer += iprot->readListBegin(_etype156, _size153);
                    this->column_key.resize(_size153);
                    uint32_t _i157;
                    for (_i157 = 0; _i157 < _size153; ++_i157) {
                        xfer += iprot->readString(this->column_key[_i157]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size158;
                    ::apache::thrift::protocol::TType _etype161;
                    xfer += iprot->readListBegin(_etype161, _size158);
                    this->value.resize(_size158);
                    uint32_t _i162;
                    for (_i162 = 0; _i162 < _size158; ++_i162) {
                        xfer += iprot->readDouble(this->value[_i162]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_merge_double_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_double_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter163;
        for (_iter163 = this->row_key.begin(); _iter163 != this->row_key.end(); ++_iter163) {
            xfer += oprot->writeString((*_iter163));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter164;
        for (_iter164 = this->column_key.begin(); _iter164 != this->column_key.end(); ++_iter164) {
            xfer += oprot->writeString((*_iter164));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->value.size()));
        std::vector<double> ::const_iterator _iter165;
        for (_iter165 = this->value.begin(); _iter165 != this->value.end(); ++_iter165) {
            xfer += oprot->writeDouble((*_iter165));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_merge_double_pargs::~TaskTracker_vector_merge_double_pargs() throw() {
}


uint32_t TaskTracker_vector_merge_double_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_double_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter166;
        for (_iter166 = (*(this->row_key)).begin(); _iter166 != (*(this->row_key)).end(); ++_iter166) {
            xfer += oprot->writeString((*_iter166));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter167;
        for (_iter167 = (*(this->column_key)).begin(); _iter167 != (*(this->column_key)).end(); ++_iter167) {
            xfer += oprot->writeString((*_iter167));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<double> ::const_iterator _iter168;
        for (_iter168 = (*(this->value)).begin(); _iter168 != (*(this->value)).end(); ++_iter168) {
            xfer += oprot->writeDouble((*_iter168));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_merge_double_result::~TaskTracker_vector_merge_double_result() throw() {
}


uint32_t TaskTracker_vector_merge_double_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_merge_double_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_double_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_merge_double_presult::~TaskTracker_vector_merge_double_presult() throw() {
}


uint32_t TaskTracker_vector_merge_double_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_merge_string_args::~TaskTracker_vector_merge_string_args() throw() {
}


uint32_t TaskTracker_vector_merge_string_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size169;
                    ::apache::thrift::protocol::TType _etype172;
                    xfer += iprot->readListBegin(_etype172, _size169);
                    this->row_key.resize(_size169);
                    uint32_t _i173;
                    for (_i173 = 0; _i173 < _size169; ++_i173) {
                        xfer += iprot->readString(this->row_key[_i173]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size174;
                    ::apache::thrift::protocol::TType _etype177;
                    xfer += iprot->readListBegin(_etype177, _size174);
                    this->column_key.resize(_size174);
                    uint32_t _i178;
                    for (_i178 = 0; _i178 < _size174; ++_i178) {
                        xfer += iprot->readString(this->column_key[_i178]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size179;
                    ::apache::thrift::protocol::TType _etype182;
                    xfer += iprot->readListBegin(_etype182, _size179);
                    this->value.resize(_size179);
                    uint32_t _i183;
                    for (_i183 = 0; _i183 < _size179; ++_i183) {
                        xfer += iprot->readString(this->value[_i183]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_merge_string_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_string_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter184;
        for (_iter184 = this->row_key.begin(); _iter184 != this->row_key.end(); ++_iter184) {
            xfer += oprot->writeString((*_iter184));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter185;
        for (_iter185 = this->column_key.begin(); _iter185 != this->column_key.end(); ++_iter185) {
            xfer += oprot->writeString((*_iter185));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->value.size()));
        std::vector<std::string> ::const_iterator _iter186;
        for (_iter186 = this->value.begin(); _iter186 != this->value.end(); ++_iter186) {
            xfer += oprot->writeString((*_iter186));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_merge_string_pargs::~TaskTracker_vector_merge_string_pargs() throw() {
}


uint32_t TaskTracker_vector_merge_string_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_string_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter187;
        for (_iter187 = (*(this->row_key)).begin(); _iter187 != (*(this->row_key)).end(); ++_iter187) {
            xfer += oprot->writeString((*_iter187));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter188;
        for (_iter188 = (*(this->column_key)).begin(); _iter188 != (*(this->column_key)).end(); ++_iter188) {
            xfer += oprot->writeString((*_iter188));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 6);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<std::string> ::const_iterator _iter189;
        for (_iter189 = (*(this->value)).begin(); _iter189 != (*(this->value)).end(); ++_iter189) {
            xfer += oprot->writeString((*_iter189));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_merge_string_result::~TaskTracker_vector_merge_string_result() throw() {
}


uint32_t TaskTracker_vector_merge_string_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_merge_string_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_merge_string_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_merge_string_presult::~TaskTracker_vector_merge_string_presult() throw() {
}


uint32_t TaskTracker_vector_merge_string_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_timed_vector_put_int_args::~TaskTracker_timed_vector_put_int_args() throw() {
}


uint32_t TaskTracker_timed_vector_put_int_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size190;
                    ::apache::thrift::protocol::TType _etype193;
                    xfer += iprot->readListBegin(_etype193, _size190);
                    this->row_key.resize(_size190);
                    uint32_t _i194;
                    for (_i194 = 0; _i194 < _size190; ++_i194) {
                        xfer += iprot->readString(this->row_key[_i194]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size195;
                    ::apache::thrift::protocol::TType _etype198;
                    xfer += iprot->readListBegin(_etype198, _size195);
                    this->column_key.resize(_size195);
                    uint32_t _i199;
                    for (_i199 = 0; _i199 < _size195; ++_i199) {
                        xfer += iprot->readString(this->column_key[_i199]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stampe);
                this->__isset.time_stampe = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size200;
                    ::apache::thrift::protocol::TType _etype203;
                    xfer += iprot->readListBegin(_etype203, _size200);
                    this->value.resize(_size200);
                    uint32_t _i204;
                    for (_i204 = 0; _i204 < _size200; ++_i204) {
                        xfer += iprot->readI64(this->value[_i204]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_vector_put_int_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_int_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter205;
        for (_iter205 = this->row_key.begin(); _iter205 != this->row_key.end(); ++_iter205) {
            xfer += oprot->writeString((*_iter205));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter206;
        for (_iter206 = this->column_key.begin(); _iter206 != this->column_key.end(); ++_iter206) {
            xfer += oprot->writeString((*_iter206));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stampe", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->time_stampe);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 7);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->value.size()));
        std::vector<int64_t> ::const_iterator _iter207;
        for (_iter207 = this->value.begin(); _iter207 != this->value.end(); ++_iter207) {
            xfer += oprot->writeI64((*_iter207));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_vector_put_int_pargs::~TaskTracker_timed_vector_put_int_pargs() throw() {
}


uint32_t TaskTracker_timed_vector_put_int_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_int_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter208;
        for (_iter208 = (*(this->row_key)).begin(); _iter208 != (*(this->row_key)).end(); ++_iter208) {
            xfer += oprot->writeString((*_iter208));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter209;
        for (_iter209 = (*(this->column_key)).begin(); _iter209 != (*(this->column_key)).end(); ++_iter209) {
            xfer += oprot->writeString((*_iter209));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stampe", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64((*(this->time_stampe)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 7);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<int64_t> ::const_iterator _iter210;
        for (_iter210 = (*(this->value)).begin(); _iter210 != (*(this->value)).end(); ++_iter210) {
            xfer += oprot->writeI64((*_iter210));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_vector_put_int_result::~TaskTracker_timed_vector_put_int_result() throw() {
}


uint32_t TaskTracker_timed_vector_put_int_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_vector_put_int_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_int_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_timed_vector_put_int_presult::~TaskTracker_timed_vector_put_int_presult() throw() {
}


uint32_t TaskTracker_timed_vector_put_int_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_timed_vector_put_double_args::~TaskTracker_timed_vector_put_double_args() throw() {
}


uint32_t TaskTracker_timed_vector_put_double_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size211;
                    ::apache::thrift::protocol::TType _etype214;
                    xfer += iprot->readListBegin(_etype214, _size211);
                    this->row_key.resize(_size211);
                    uint32_t _i215;
                    for (_i215 = 0; _i215 < _size211; ++_i215) {
                        xfer += iprot->readString(this->row_key[_i215]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size216;
                    ::apache::thrift::protocol::TType _etype219;
                    xfer += iprot->readListBegin(_etype219, _size216);
                    this->column_key.resize(_size216);
                    uint32_t _i220;
                    for (_i220 = 0; _i220 < _size216; ++_i220) {
                        xfer += iprot->readString(this->column_key[_i220]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stampe);
                this->__isset.time_stampe = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size221;
                    ::apache::thrift::protocol::TType _etype224;
                    xfer += iprot->readListBegin(_etype224, _size221);
                    this->value.resize(_size221);
                    uint32_t _i225;
                    for (_i225 = 0; _i225 < _size221; ++_i225) {
                        xfer += iprot->readDouble(this->value[_i225]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_vector_put_double_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_double_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter226;
        for (_iter226 = this->row_key.begin(); _iter226 != this->row_key.end(); ++_iter226) {
            xfer += oprot->writeString((*_iter226));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter227;
        for (_iter227 = this->column_key.begin(); _iter227 != this->column_key.end(); ++_iter227) {
            xfer += oprot->writeString((*_iter227));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stampe", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->time_stampe);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 7);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->value.size()));
        std::vector<double> ::const_iterator _iter228;
        for (_iter228 = this->value.begin(); _iter228 != this->value.end(); ++_iter228) {
            xfer += oprot->writeDouble((*_iter228));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_vector_put_double_pargs::~TaskTracker_timed_vector_put_double_pargs() throw() {
}


uint32_t TaskTracker_timed_vector_put_double_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_double_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter229;
        for (_iter229 = (*(this->row_key)).begin(); _iter229 != (*(this->row_key)).end(); ++_iter229) {
            xfer += oprot->writeString((*_iter229));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter230;
        for (_iter230 = (*(this->column_key)).begin(); _iter230 != (*(this->column_key)).end(); ++_iter230) {
            xfer += oprot->writeString((*_iter230));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stampe", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64((*(this->time_stampe)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 7);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<double> ::const_iterator _iter231;
        for (_iter231 = (*(this->value)).begin(); _iter231 != (*(this->value)).end(); ++_iter231) {
            xfer += oprot->writeDouble((*_iter231));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_vector_put_double_result::~TaskTracker_timed_vector_put_double_result() throw() {
}


uint32_t TaskTracker_timed_vector_put_double_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_vector_put_double_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_double_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_timed_vector_put_double_presult::~TaskTracker_timed_vector_put_double_presult() throw() {
}


uint32_t TaskTracker_timed_vector_put_double_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_timed_vector_put_string_args::~TaskTracker_timed_vector_put_string_args() throw() {
}


uint32_t TaskTracker_timed_vector_put_string_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size232;
                    ::apache::thrift::protocol::TType _etype235;
                    xfer += iprot->readListBegin(_etype235, _size232);
                    this->row_key.resize(_size232);
                    uint32_t _i236;
                    for (_i236 = 0; _i236 < _size232; ++_i236) {
                        xfer += iprot->readString(this->row_key[_i236]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size237;
                    ::apache::thrift::protocol::TType _etype240;
                    xfer += iprot->readListBegin(_etype240, _size237);
                    this->column_key.resize(_size237);
                    uint32_t _i241;
                    for (_i241 = 0; _i241 < _size237; ++_i241) {
                        xfer += iprot->readString(this->column_key[_i241]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 6:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stampe);
                this->__isset.time_stampe = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 7:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->value.clear();
                    uint32_t _size242;
                    ::apache::thrift::protocol::TType _etype245;
                    xfer += iprot->readListBegin(_etype245, _size242);
                    this->value.resize(_size242);
                    uint32_t _i246;
                    for (_i246 = 0; _i246 < _size242; ++_i246) {
                        xfer += iprot->readString(this->value[_i246]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.value = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_vector_put_string_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_string_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter247;
        for (_iter247 = this->row_key.begin(); _iter247 != this->row_key.end(); ++_iter247) {
            xfer += oprot->writeString((*_iter247));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter248;
        for (_iter248 = this->column_key.begin(); _iter248 != this->column_key.end(); ++_iter248) {
            xfer += oprot->writeString((*_iter248));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stampe", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->time_stampe);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 7);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->value.size()));
        std::vector<std::string> ::const_iterator _iter249;
        for (_iter249 = this->value.begin(); _iter249 != this->value.end(); ++_iter249) {
            xfer += oprot->writeString((*_iter249));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_vector_put_string_pargs::~TaskTracker_timed_vector_put_string_pargs() throw() {
}


uint32_t TaskTracker_timed_vector_put_string_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_string_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter250;
        for (_iter250 = (*(this->row_key)).begin(); _iter250 != (*(this->row_key)).end(); ++_iter250) {
            xfer += oprot->writeString((*_iter250));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter251;
        for (_iter251 = (*(this->column_key)).begin(); _iter251 != (*(this->column_key)).end(); ++_iter251) {
            xfer += oprot->writeString((*_iter251));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stampe", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64((*(this->time_stampe)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_LIST, 7);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->value)).size()));
        std::vector<std::string> ::const_iterator _iter252;
        for (_iter252 = (*(this->value)).begin(); _iter252 != (*(this->value)).end(); ++_iter252) {
            xfer += oprot->writeString((*_iter252));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_vector_put_string_result::~TaskTracker_timed_vector_put_string_result() throw() {
}


uint32_t TaskTracker_timed_vector_put_string_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->success);
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_vector_put_string_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_timed_vector_put_string_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
        xfer += oprot->writeI64(this->success);
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_timed_vector_put_string_presult::~TaskTracker_timed_vector_put_string_presult() throw() {
}


uint32_t TaskTracker_timed_vector_put_string_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64((*(this->success)));
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_get_int_args::~TaskTracker_vector_get_int_args() throw() {
}


uint32_t TaskTracker_vector_get_int_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size253;
                    ::apache::thrift::protocol::TType _etype256;
                    xfer += iprot->readListBegin(_etype256, _size253);
                    this->row_key.resize(_size253);
                    uint32_t _i257;
                    for (_i257 = 0; _i257 < _size253; ++_i257) {
                        xfer += iprot->readString(this->row_key[_i257]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size258;
                    ::apache::thrift::protocol::TType _etype261;
                    xfer += iprot->readListBegin(_etype261, _size258);
                    this->column_key.resize(_size258);
                    uint32_t _i262;
                    for (_i262 = 0; _i262 < _size258; ++_i262) {
                        xfer += iprot->readString(this->column_key[_i262]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_get_int_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_get_int_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter263;
        for (_iter263 = this->row_key.begin(); _iter263 != this->row_key.end(); ++_iter263) {
            xfer += oprot->writeString((*_iter263));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter264;
        for (_iter264 = this->column_key.begin(); _iter264 != this->column_key.end(); ++_iter264) {
            xfer += oprot->writeString((*_iter264));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_get_int_pargs::~TaskTracker_vector_get_int_pargs() throw() {
}


uint32_t TaskTracker_vector_get_int_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_get_int_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter265;
        for (_iter265 = (*(this->row_key)).begin(); _iter265 != (*(this->row_key)).end(); ++_iter265) {
            xfer += oprot->writeString((*_iter265));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter266;
        for (_iter266 = (*(this->column_key)).begin(); _iter266 != (*(this->column_key)).end(); ++_iter266) {
            xfer += oprot->writeString((*_iter266));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_get_int_result::~TaskTracker_vector_get_int_result() throw() {
}


uint32_t TaskTracker_vector_get_int_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->success.clear();
                    uint32_t _size267;
                    ::apache::thrift::protocol::TType _etype270;
                    xfer += iprot->readListBegin(_etype270, _size267);
                    this->success.resize(_size267);
                    uint32_t _i271;
                    for (_i271 = 0; _i271 < _size267; ++_i271) {
                        xfer += iprot->readI64(this->success[_i271]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_get_int_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_get_int_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
            std::vector<int64_t> ::const_iterator _iter272;
            for (_iter272 = this->success.begin(); _iter272 != this->success.end(); ++_iter272) {
                xfer += oprot->writeI64((*_iter272));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_get_int_presult::~TaskTracker_vector_get_int_presult() throw() {
}


uint32_t TaskTracker_vector_get_int_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    (*(this->success)).clear();
                    uint32_t _size273;
                    ::apache::thrift::protocol::TType _etype276;
                    xfer += iprot->readListBegin(_etype276, _size273);
                    (*(this->success)).resize(_size273);
                    uint32_t _i277;
                    for (_i277 = 0; _i277 < _size273; ++_i277) {
                        xfer += iprot->readI64((*(this->success))[_i277]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_get_double_args::~TaskTracker_vector_get_double_args() throw() {
}


uint32_t TaskTracker_vector_get_double_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size278;
                    ::apache::thrift::protocol::TType _etype281;
                    xfer += iprot->readListBegin(_etype281, _size278);
                    this->row_key.resize(_size278);
                    uint32_t _i282;
                    for (_i282 = 0; _i282 < _size278; ++_i282) {
                        xfer += iprot->readString(this->row_key[_i282]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size283;
                    ::apache::thrift::protocol::TType _etype286;
                    xfer += iprot->readListBegin(_etype286, _size283);
                    this->column_key.resize(_size283);
                    uint32_t _i287;
                    for (_i287 = 0; _i287 < _size283; ++_i287) {
                        xfer += iprot->readString(this->column_key[_i287]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_get_double_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_get_double_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter288;
        for (_iter288 = this->row_key.begin(); _iter288 != this->row_key.end(); ++_iter288) {
            xfer += oprot->writeString((*_iter288));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter289;
        for (_iter289 = this->column_key.begin(); _iter289 != this->column_key.end(); ++_iter289) {
            xfer += oprot->writeString((*_iter289));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_get_double_pargs::~TaskTracker_vector_get_double_pargs() throw() {
}


uint32_t TaskTracker_vector_get_double_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_get_double_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter290;
        for (_iter290 = (*(this->row_key)).begin(); _iter290 != (*(this->row_key)).end(); ++_iter290) {
            xfer += oprot->writeString((*_iter290));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter291;
        for (_iter291 = (*(this->column_key)).begin(); _iter291 != (*(this->column_key)).end(); ++_iter291) {
            xfer += oprot->writeString((*_iter291));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_get_double_result::~TaskTracker_vector_get_double_result() throw() {
}


uint32_t TaskTracker_vector_get_double_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->success.clear();
                    uint32_t _size292;
                    ::apache::thrift::protocol::TType _etype295;
                    xfer += iprot->readListBegin(_etype295, _size292);
                    this->success.resize(_size292);
                    uint32_t _i296;
                    for (_i296 = 0; _i296 < _size292; ++_i296) {
                        xfer += iprot->readDouble(this->success[_i296]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_get_double_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_get_double_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->success.size()));
            std::vector<double> ::const_iterator _iter297;
            for (_iter297 = this->success.begin(); _iter297 != this->success.end(); ++_iter297) {
                xfer += oprot->writeDouble((*_iter297));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_get_double_presult::~TaskTracker_vector_get_double_presult() throw() {
}


uint32_t TaskTracker_vector_get_double_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    (*(this->success)).clear();
                    uint32_t _size298;
                    ::apache::thrift::protocol::TType _etype301;
                    xfer += iprot->readListBegin(_etype301, _size298);
                    (*(this->success)).resize(_size298);
                    uint32_t _i302;
                    for (_i302 = 0; _i302 < _size298; ++_i302) {
                        xfer += iprot->readDouble((*(this->success))[_i302]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_vector_get_string_args::~TaskTracker_vector_get_string_args() throw() {
}


uint32_t TaskTracker_vector_get_string_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->row_key.clear();
                    uint32_t _size303;
                    ::apache::thrift::protocol::TType _etype306;
                    xfer += iprot->readListBegin(_etype306, _size303);
                    this->row_key.resize(_size303);
                    uint32_t _i307;
                    for (_i307 = 0; _i307 < _size303; ++_i307) {
                        xfer += iprot->readString(this->row_key[_i307]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.row_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 5:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->column_key.clear();
                    uint32_t _size308;
                    ::apache::thrift::protocol::TType _etype311;
                    xfer += iprot->readListBegin(_etype311, _size308);
                    this->column_key.resize(_size308);
                    uint32_t _i312;
                    for (_i312 = 0; _i312 < _size308; ++_i312) {
                        xfer += iprot->readString(this->column_key[_i312]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.column_key = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_get_string_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_get_string_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row_key.size()));
        std::vector<std::string> ::const_iterator _iter313;
        for (_iter313 = this->row_key.begin(); _iter313 != this->row_key.end(); ++_iter313) {
            xfer += oprot->writeString((*_iter313));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_key.size()));
        std::vector<std::string> ::const_iterator _iter314;
        for (_iter314 = this->column_key.begin(); _iter314 != this->column_key.end(); ++_iter314) {
            xfer += oprot->writeString((*_iter314));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_get_string_pargs::~TaskTracker_vector_get_string_pargs() throw() {
}


uint32_t TaskTracker_vector_get_string_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_vector_get_string_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("row_key", ::apache::thrift::protocol::T_LIST, 4);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->row_key)).size()));
        std::vector<std::string> ::const_iterator _iter315;
        for (_iter315 = (*(this->row_key)).begin(); _iter315 != (*(this->row_key)).end(); ++_iter315) {
            xfer += oprot->writeString((*_iter315));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("column_key", ::apache::thrift::protocol::T_LIST, 5);
    {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*(this->column_key)).size()));
        std::vector<std::string> ::const_iterator _iter316;
        for (_iter316 = (*(this->column_key)).begin(); _iter316 != (*(this->column_key)).end(); ++_iter316) {
            xfer += oprot->writeString((*_iter316));
        }
        xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_vector_get_string_result::~TaskTracker_vector_get_string_result() throw() {
}


uint32_t TaskTracker_vector_get_string_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    this->success.clear();
                    uint32_t _size317;
                    ::apache::thrift::protocol::TType _etype320;
                    xfer += iprot->readListBegin(_etype320, _size317);
                    this->success.resize(_size317);
                    uint32_t _i321;
                    for (_i321 = 0; _i321 < _size317; ++_i321) {
                        xfer += iprot->readString(this->success[_i321]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_vector_get_string_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_vector_get_string_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
            std::vector<std::string> ::const_iterator _iter322;
            for (_iter322 = this->success.begin(); _iter322 != this->success.end(); ++_iter322) {
                xfer += oprot->writeString((*_iter322));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_vector_get_string_presult::~TaskTracker_vector_get_string_presult() throw() {
}


uint32_t TaskTracker_vector_get_string_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_LIST) {
                {
                    (*(this->success)).clear();
                    uint32_t _size323;
                    ::apache::thrift::protocol::TType _etype326;
                    xfer += iprot->readListBegin(_etype326, _size323);
                    (*(this->success)).resize(_size323);
                    uint32_t _i327;
                    for (_i327 = 0; _i327 < _size323; ++_i327) {
                        xfer += iprot->readString((*(this->success))[_i327]);
                    }
                    xfer += iprot->readListEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_scan_all_int_args::~TaskTracker_scan_all_int_args() throw() {
}


uint32_t TaskTracker_scan_all_int_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_scan_all_int_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_scan_all_int_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_scan_all_int_pargs::~TaskTracker_scan_all_int_pargs() throw() {
}


uint32_t TaskTracker_scan_all_int_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_scan_all_int_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_scan_all_int_result::~TaskTracker_scan_all_int_result() throw() {
}


uint32_t TaskTracker_scan_all_int_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->success.clear();
                    uint32_t _size328;
                    ::apache::thrift::protocol::TType _ktype329;
                    ::apache::thrift::protocol::TType _vtype330;
                    xfer += iprot->readMapBegin(_ktype329, _vtype330, _size328);
                    uint32_t _i332;
                    for (_i332 = 0; _i332 < _size328; ++_i332) {
                        std::string _key333;
                        xfer += iprot->readString(_key333);
                        std::map<std::string, int64_t> & _val334 = this->success[_key333];
                        {
                            _val334.clear();
                            uint32_t _size335;
                            ::apache::thrift::protocol::TType _ktype336;
                            ::apache::thrift::protocol::TType _vtype337;
                            xfer += iprot->readMapBegin(_ktype336, _vtype337, _size335);
                            uint32_t _i339;
                            for (_i339 = 0; _i339 < _size335; ++_i339) {
                                std::string _key340;
                                xfer += iprot->readString(_key340);
                                int64_t& _val341 = _val334[_key340];
                                xfer += iprot->readI64(_val341);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_scan_all_int_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_scan_all_int_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->success.size()));
            std::map<std::string, std::map<std::string, int64_t> > ::const_iterator _iter342;
            for (_iter342 = this->success.begin(); _iter342 != this->success.end(); ++_iter342) {
                xfer += oprot->writeString(_iter342->first);
                {
                    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(_iter342->second.size()));
                    std::map<std::string, int64_t> ::const_iterator _iter343;
                    for (_iter343 = _iter342->second.begin(); _iter343 != _iter342->second.end(); ++_iter343) {
                        xfer += oprot->writeString(_iter343->first);
                        xfer += oprot->writeI64(_iter343->second);
                    }
                    xfer += oprot->writeMapEnd();
                }
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_scan_all_int_presult::~TaskTracker_scan_all_int_presult() throw() {
}


uint32_t TaskTracker_scan_all_int_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    (*(this->success)).clear();
                    uint32_t _size344;
                    ::apache::thrift::protocol::TType _ktype345;
                    ::apache::thrift::protocol::TType _vtype346;
                    xfer += iprot->readMapBegin(_ktype345, _vtype346, _size344);
                    uint32_t _i348;
                    for (_i348 = 0; _i348 < _size344; ++_i348) {
                        std::string _key349;
                        xfer += iprot->readString(_key349);
                        std::map<std::string, int64_t> & _val350 = (*(this->success))[_key349];
                        {
                            _val350.clear();
                            uint32_t _size351;
                            ::apache::thrift::protocol::TType _ktype352;
                            ::apache::thrift::protocol::TType _vtype353;
                            xfer += iprot->readMapBegin(_ktype352, _vtype353, _size351);
                            uint32_t _i355;
                            for (_i355 = 0; _i355 < _size351; ++_i355) {
                                std::string _key356;
                                xfer += iprot->readString(_key356);
                                int64_t& _val357 = _val350[_key356];
                                xfer += iprot->readI64(_val357);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_scan_all_double_args::~TaskTracker_scan_all_double_args() throw() {
}


uint32_t TaskTracker_scan_all_double_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_scan_all_double_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_scan_all_double_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_scan_all_double_pargs::~TaskTracker_scan_all_double_pargs() throw() {
}


uint32_t TaskTracker_scan_all_double_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_scan_all_double_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_scan_all_double_result::~TaskTracker_scan_all_double_result() throw() {
}


uint32_t TaskTracker_scan_all_double_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->success.clear();
                    uint32_t _size358;
                    ::apache::thrift::protocol::TType _ktype359;
                    ::apache::thrift::protocol::TType _vtype360;
                    xfer += iprot->readMapBegin(_ktype359, _vtype360, _size358);
                    uint32_t _i362;
                    for (_i362 = 0; _i362 < _size358; ++_i362) {
                        std::string _key363;
                        xfer += iprot->readString(_key363);
                        std::map<std::string, double> & _val364 = this->success[_key363];
                        {
                            _val364.clear();
                            uint32_t _size365;
                            ::apache::thrift::protocol::TType _ktype366;
                            ::apache::thrift::protocol::TType _vtype367;
                            xfer += iprot->readMapBegin(_ktype366, _vtype367, _size365);
                            uint32_t _i369;
                            for (_i369 = 0; _i369 < _size365; ++_i369) {
                                std::string _key370;
                                xfer += iprot->readString(_key370);
                                double& _val371 = _val364[_key370];
                                xfer += iprot->readDouble(_val371);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_scan_all_double_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_scan_all_double_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->success.size()));
            std::map<std::string, std::map<std::string, double> > ::const_iterator _iter372;
            for (_iter372 = this->success.begin(); _iter372 != this->success.end(); ++_iter372) {
                xfer += oprot->writeString(_iter372->first);
                {
                    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter372->second.size()));
                    std::map<std::string, double> ::const_iterator _iter373;
                    for (_iter373 = _iter372->second.begin(); _iter373 != _iter372->second.end(); ++_iter373) {
                        xfer += oprot->writeString(_iter373->first);
                        xfer += oprot->writeDouble(_iter373->second);
                    }
                    xfer += oprot->writeMapEnd();
                }
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_scan_all_double_presult::~TaskTracker_scan_all_double_presult() throw() {
}


uint32_t TaskTracker_scan_all_double_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    (*(this->success)).clear();
                    uint32_t _size374;
                    ::apache::thrift::protocol::TType _ktype375;
                    ::apache::thrift::protocol::TType _vtype376;
                    xfer += iprot->readMapBegin(_ktype375, _vtype376, _size374);
                    uint32_t _i378;
                    for (_i378 = 0; _i378 < _size374; ++_i378) {
                        std::string _key379;
                        xfer += iprot->readString(_key379);
                        std::map<std::string, double> & _val380 = (*(this->success))[_key379];
                        {
                            _val380.clear();
                            uint32_t _size381;
                            ::apache::thrift::protocol::TType _ktype382;
                            ::apache::thrift::protocol::TType _vtype383;
                            xfer += iprot->readMapBegin(_ktype382, _vtype383, _size381);
                            uint32_t _i385;
                            for (_i385 = 0; _i385 < _size381; ++_i385) {
                                std::string _key386;
                                xfer += iprot->readString(_key386);
                                double& _val387 = _val380[_key386];
                                xfer += iprot->readDouble(_val387);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_scan_all_string_args::~TaskTracker_scan_all_string_args() throw() {
}


uint32_t TaskTracker_scan_all_string_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_scan_all_string_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_scan_all_string_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_scan_all_string_pargs::~TaskTracker_scan_all_string_pargs() throw() {
}


uint32_t TaskTracker_scan_all_string_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_scan_all_string_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_scan_all_string_result::~TaskTracker_scan_all_string_result() throw() {
}


uint32_t TaskTracker_scan_all_string_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->success.clear();
                    uint32_t _size388;
                    ::apache::thrift::protocol::TType _ktype389;
                    ::apache::thrift::protocol::TType _vtype390;
                    xfer += iprot->readMapBegin(_ktype389, _vtype390, _size388);
                    uint32_t _i392;
                    for (_i392 = 0; _i392 < _size388; ++_i392) {
                        std::string _key393;
                        xfer += iprot->readString(_key393);
                        std::map<std::string, std::string> & _val394 = this->success[_key393];
                        {
                            _val394.clear();
                            uint32_t _size395;
                            ::apache::thrift::protocol::TType _ktype396;
                            ::apache::thrift::protocol::TType _vtype397;
                            xfer += iprot->readMapBegin(_ktype396, _vtype397, _size395);
                            uint32_t _i399;
                            for (_i399 = 0; _i399 < _size395; ++_i399) {
                                std::string _key400;
                                xfer += iprot->readString(_key400);
                                std::string& _val401 = _val394[_key400];
                                xfer += iprot->readString(_val401);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_scan_all_string_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_scan_all_string_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->success.size()));
            std::map<std::string, std::map<std::string, std::string> > ::const_iterator _iter402;
            for (_iter402 = this->success.begin(); _iter402 != this->success.end(); ++_iter402) {
                xfer += oprot->writeString(_iter402->first);
                {
                    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter402->second.size()));
                    std::map<std::string, std::string> ::const_iterator _iter403;
                    for (_iter403 = _iter402->second.begin(); _iter403 != _iter402->second.end(); ++_iter403) {
                        xfer += oprot->writeString(_iter403->first);
                        xfer += oprot->writeString(_iter403->second);
                    }
                    xfer += oprot->writeMapEnd();
                }
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_scan_all_string_presult::~TaskTracker_scan_all_string_presult() throw() {
}


uint32_t TaskTracker_scan_all_string_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    (*(this->success)).clear();
                    uint32_t _size404;
                    ::apache::thrift::protocol::TType _ktype405;
                    ::apache::thrift::protocol::TType _vtype406;
                    xfer += iprot->readMapBegin(_ktype405, _vtype406, _size404);
                    uint32_t _i408;
                    for (_i408 = 0; _i408 < _size404; ++_i408) {
                        std::string _key409;
                        xfer += iprot->readString(_key409);
                        std::map<std::string, std::string> & _val410 = (*(this->success))[_key409];
                        {
                            _val410.clear();
                            uint32_t _size411;
                            ::apache::thrift::protocol::TType _ktype412;
                            ::apache::thrift::protocol::TType _vtype413;
                            xfer += iprot->readMapBegin(_ktype412, _vtype413, _size411);
                            uint32_t _i415;
                            for (_i415 = 0; _i415 < _size411; ++_i415) {
                                std::string _key416;
                                xfer += iprot->readString(_key416);
                                std::string& _val417 = _val410[_key416];
                                xfer += iprot->readString(_val417);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_timed_scan_int_args::~TaskTracker_timed_scan_int_args() throw() {
}


uint32_t TaskTracker_timed_scan_int_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stamp);
                this->__isset.time_stamp = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_scan_int_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_int_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->time_stamp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_scan_int_pargs::~TaskTracker_timed_scan_int_pargs() throw() {
}


uint32_t TaskTracker_timed_scan_int_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_int_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64((*(this->time_stamp)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_scan_int_result::~TaskTracker_timed_scan_int_result() throw() {
}


uint32_t TaskTracker_timed_scan_int_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->success.clear();
                    uint32_t _size418;
                    ::apache::thrift::protocol::TType _ktype419;
                    ::apache::thrift::protocol::TType _vtype420;
                    xfer += iprot->readMapBegin(_ktype419, _vtype420, _size418);
                    uint32_t _i422;
                    for (_i422 = 0; _i422 < _size418; ++_i422) {
                        std::string _key423;
                        xfer += iprot->readString(_key423);
                        std::map<std::string, int64_t> & _val424 = this->success[_key423];
                        {
                            _val424.clear();
                            uint32_t _size425;
                            ::apache::thrift::protocol::TType _ktype426;
                            ::apache::thrift::protocol::TType _vtype427;
                            xfer += iprot->readMapBegin(_ktype426, _vtype427, _size425);
                            uint32_t _i429;
                            for (_i429 = 0; _i429 < _size425; ++_i429) {
                                std::string _key430;
                                xfer += iprot->readString(_key430);
                                int64_t& _val431 = _val424[_key430];
                                xfer += iprot->readI64(_val431);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_scan_int_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_int_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->success.size()));
            std::map<std::string, std::map<std::string, int64_t> > ::const_iterator _iter432;
            for (_iter432 = this->success.begin(); _iter432 != this->success.end(); ++_iter432) {
                xfer += oprot->writeString(_iter432->first);
                {
                    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(_iter432->second.size()));
                    std::map<std::string, int64_t> ::const_iterator _iter433;
                    for (_iter433 = _iter432->second.begin(); _iter433 != _iter432->second.end(); ++_iter433) {
                        xfer += oprot->writeString(_iter433->first);
                        xfer += oprot->writeI64(_iter433->second);
                    }
                    xfer += oprot->writeMapEnd();
                }
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_timed_scan_int_presult::~TaskTracker_timed_scan_int_presult() throw() {
}


uint32_t TaskTracker_timed_scan_int_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    (*(this->success)).clear();
                    uint32_t _size434;
                    ::apache::thrift::protocol::TType _ktype435;
                    ::apache::thrift::protocol::TType _vtype436;
                    xfer += iprot->readMapBegin(_ktype435, _vtype436, _size434);
                    uint32_t _i438;
                    for (_i438 = 0; _i438 < _size434; ++_i438) {
                        std::string _key439;
                        xfer += iprot->readString(_key439);
                        std::map<std::string, int64_t> & _val440 = (*(this->success))[_key439];
                        {
                            _val440.clear();
                            uint32_t _size441;
                            ::apache::thrift::protocol::TType _ktype442;
                            ::apache::thrift::protocol::TType _vtype443;
                            xfer += iprot->readMapBegin(_ktype442, _vtype443, _size441);
                            uint32_t _i445;
                            for (_i445 = 0; _i445 < _size441; ++_i445) {
                                std::string _key446;
                                xfer += iprot->readString(_key446);
                                int64_t& _val447 = _val440[_key446];
                                xfer += iprot->readI64(_val447);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_timed_scan_double_args::~TaskTracker_timed_scan_double_args() throw() {
}


uint32_t TaskTracker_timed_scan_double_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stamp);
                this->__isset.time_stamp = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_scan_double_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_double_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->time_stamp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_scan_double_pargs::~TaskTracker_timed_scan_double_pargs() throw() {
}


uint32_t TaskTracker_timed_scan_double_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_double_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64((*(this->time_stamp)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_scan_double_result::~TaskTracker_timed_scan_double_result() throw() {
}


uint32_t TaskTracker_timed_scan_double_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->success.clear();
                    uint32_t _size448;
                    ::apache::thrift::protocol::TType _ktype449;
                    ::apache::thrift::protocol::TType _vtype450;
                    xfer += iprot->readMapBegin(_ktype449, _vtype450, _size448);
                    uint32_t _i452;
                    for (_i452 = 0; _i452 < _size448; ++_i452) {
                        std::string _key453;
                        xfer += iprot->readString(_key453);
                        std::map<std::string, double> & _val454 = this->success[_key453];
                        {
                            _val454.clear();
                            uint32_t _size455;
                            ::apache::thrift::protocol::TType _ktype456;
                            ::apache::thrift::protocol::TType _vtype457;
                            xfer += iprot->readMapBegin(_ktype456, _vtype457, _size455);
                            uint32_t _i459;
                            for (_i459 = 0; _i459 < _size455; ++_i459) {
                                std::string _key460;
                                xfer += iprot->readString(_key460);
                                double& _val461 = _val454[_key460];
                                xfer += iprot->readDouble(_val461);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_scan_double_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_double_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->success.size()));
            std::map<std::string, std::map<std::string, double> > ::const_iterator _iter462;
            for (_iter462 = this->success.begin(); _iter462 != this->success.end(); ++_iter462) {
                xfer += oprot->writeString(_iter462->first);
                {
                    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(_iter462->second.size()));
                    std::map<std::string, double> ::const_iterator _iter463;
                    for (_iter463 = _iter462->second.begin(); _iter463 != _iter462->second.end(); ++_iter463) {
                        xfer += oprot->writeString(_iter463->first);
                        xfer += oprot->writeDouble(_iter463->second);
                    }
                    xfer += oprot->writeMapEnd();
                }
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_timed_scan_double_presult::~TaskTracker_timed_scan_double_presult() throw() {
}


uint32_t TaskTracker_timed_scan_double_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    (*(this->success)).clear();
                    uint32_t _size464;
                    ::apache::thrift::protocol::TType _ktype465;
                    ::apache::thrift::protocol::TType _vtype466;
                    xfer += iprot->readMapBegin(_ktype465, _vtype466, _size464);
                    uint32_t _i468;
                    for (_i468 = 0; _i468 < _size464; ++_i468) {
                        std::string _key469;
                        xfer += iprot->readString(_key469);
                        std::map<std::string, double> & _val470 = (*(this->success))[_key469];
                        {
                            _val470.clear();
                            uint32_t _size471;
                            ::apache::thrift::protocol::TType _ktype472;
                            ::apache::thrift::protocol::TType _vtype473;
                            xfer += iprot->readMapBegin(_ktype472, _vtype473, _size471);
                            uint32_t _i475;
                            for (_i475 = 0; _i475 < _size471; ++_i475) {
                                std::string _key476;
                                xfer += iprot->readString(_key476);
                                double& _val477 = _val470[_key476];
                                xfer += iprot->readDouble(_val477);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}


TaskTracker_timed_scan_string_args::~TaskTracker_timed_scan_string_args() throw() {
}


uint32_t TaskTracker_timed_scan_string_args::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 1:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->table_name);
                this->__isset.table_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 2:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->shard_id);
                this->__isset.shard_id = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 3:
            if (ftype == ::apache::thrift::protocol::T_STRING) {
                xfer += iprot->readString(this->cf_name);
                this->__isset.cf_name = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        case 4:
            if (ftype == ::apache::thrift::protocol::T_I64) {
                xfer += iprot->readI64(this->time_stamp);
                this->__isset.time_stamp = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_scan_string_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_string_args");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->table_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->shard_id);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cf_name);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->time_stamp);
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_scan_string_pargs::~TaskTracker_timed_scan_string_pargs() throw() {
}


uint32_t TaskTracker_timed_scan_string_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_string_pargs");

    xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString((*(this->table_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("shard_id", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64((*(this->shard_id)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("cf_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString((*(this->cf_name)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("time_stamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64((*(this->time_stamp)));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}


TaskTracker_timed_scan_string_result::~TaskTracker_timed_scan_string_result() throw() {
}


uint32_t TaskTracker_timed_scan_string_result::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    this->success.clear();
                    uint32_t _size478;
                    ::apache::thrift::protocol::TType _ktype479;
                    ::apache::thrift::protocol::TType _vtype480;
                    xfer += iprot->readMapBegin(_ktype479, _vtype480, _size478);
                    uint32_t _i482;
                    for (_i482 = 0; _i482 < _size478; ++_i482) {
                        std::string _key483;
                        xfer += iprot->readString(_key483);
                        std::map<std::string, std::string> & _val484 = this->success[_key483];
                        {
                            _val484.clear();
                            uint32_t _size485;
                            ::apache::thrift::protocol::TType _ktype486;
                            ::apache::thrift::protocol::TType _vtype487;
                            xfer += iprot->readMapBegin(_ktype486, _vtype487, _size485);
                            uint32_t _i489;
                            for (_i489 = 0; _i489 < _size485; ++_i489) {
                                std::string _key490;
                                xfer += iprot->readString(_key490);
                                std::string& _val491 = _val484[_key490];
                                xfer += iprot->readString(_val491);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t TaskTracker_timed_scan_string_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

    uint32_t xfer = 0;

    xfer += oprot->writeStructBegin("TaskTracker_timed_scan_string_result");

    if (this->__isset.success) {
        xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_MAP, 0);
        {
            xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->success.size()));
            std::map<std::string, std::map<std::string, std::string> > ::const_iterator _iter492;
            for (_iter492 = this->success.begin(); _iter492 != this->success.end(); ++_iter492) {
                xfer += oprot->writeString(_iter492->first);
                {
                    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter492->second.size()));
                    std::map<std::string, std::string> ::const_iterator _iter493;
                    for (_iter493 = _iter492->second.begin(); _iter493 != _iter492->second.end(); ++_iter493) {
                        xfer += oprot->writeString(_iter493->first);
                        xfer += oprot->writeString(_iter493->second);
                    }
                    xfer += oprot->writeMapEnd();
                }
            }
            xfer += oprot->writeMapEnd();
        }
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    return xfer;
}


TaskTracker_timed_scan_string_presult::~TaskTracker_timed_scan_string_presult() throw() {
}


uint32_t TaskTracker_timed_scan_string_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::apache::thrift::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::apache::thrift::protocol::TProtocolException;


    while (true) {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::apache::thrift::protocol::T_STOP) {
            break;
        }
        switch (fid) {
        case 0:
            if (ftype == ::apache::thrift::protocol::T_MAP) {
                {
                    (*(this->success)).clear();
                    uint32_t _size494;
                    ::apache::thrift::protocol::TType _ktype495;
                    ::apache::thrift::protocol::TType _vtype496;
                    xfer += iprot->readMapBegin(_ktype495, _vtype496, _size494);
                    uint32_t _i498;
                    for (_i498 = 0; _i498 < _size494; ++_i498) {
                        std::string _key499;
                        xfer += iprot->readString(_key499);
                        std::map<std::string, std::string> & _val500 = (*(this->success))[_key499];
                        {
                            _val500.clear();
                            uint32_t _size501;
                            ::apache::thrift::protocol::TType _ktype502;
                            ::apache::thrift::protocol::TType _vtype503;
                            xfer += iprot->readMapBegin(_ktype502, _vtype503, _size501);
                            uint32_t _i505;
                            for (_i505 = 0; _i505 < _size501; ++_i505) {
                                std::string _key506;
                                xfer += iprot->readString(_key506);
                                std::string& _val507 = _val500[_key506];
                                xfer += iprot->readString(_val507);
                            }
                            xfer += iprot->readMapEnd();
                        }
                    }
                    xfer += iprot->readMapEnd();
                }
                this->__isset.success = true;
            } else {
                xfer += iprot->skip(ftype);
            }
            break;
        default:
            xfer += iprot->skip(ftype);
            break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

void TaskTrackerClient::ping(std::string& _return) {
    send_ping();
    recv_ping(_return);
}

void TaskTrackerClient::send_ping() {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("ping", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_ping_pargs args;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_ping(std::string& _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("ping") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_ping_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ping failed: unknown result");
}

int64_t TaskTrackerClient::create_table(const TableProperty& table_property) {
    send_create_table(table_property);
    return recv_create_table();
}

void TaskTrackerClient::send_create_table(const TableProperty& table_property) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("create_table", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_create_table_pargs args;
    args.table_property = &table_property;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_create_table() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("create_table") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_create_table_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "create_table failed: unknown result");
}

int64_t TaskTrackerClient::create_cf(const std::string& table_name, const ColumnFamilyProperty& cf_property) {
    send_create_cf(table_name, cf_property);
    return recv_create_cf();
}

void TaskTrackerClient::send_create_cf(const std::string& table_name, const ColumnFamilyProperty& cf_property) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("create_cf", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_create_cf_pargs args;
    args.table_name = &table_name;
    args.cf_property = &cf_property;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_create_cf() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("create_cf") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_create_cf_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "create_cf failed: unknown result");
}

int64_t TaskTrackerClient::vector_put_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<int64_t> & value) {
    send_vector_put_int(table_name, shard_id, cf_name, row_key, column_key, value);
    return recv_vector_put_int();
}

void TaskTrackerClient::send_vector_put_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<int64_t> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_put_int", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_put_int_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_vector_put_int() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_put_int") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_vector_put_int_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_put_int failed: unknown result");
}

int64_t TaskTrackerClient::vector_put_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<double> & value) {
    send_vector_put_double(table_name, shard_id, cf_name, row_key, column_key, value);
    return recv_vector_put_double();
}

void TaskTrackerClient::send_vector_put_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<double> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_put_double", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_put_double_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_vector_put_double() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_put_double") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_vector_put_double_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_put_double failed: unknown result");
}

int64_t TaskTrackerClient::vector_put_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<std::string> & value) {
    send_vector_put_string(table_name, shard_id, cf_name, row_key, column_key, value);
    return recv_vector_put_string();
}

void TaskTrackerClient::send_vector_put_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<std::string> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_put_string", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_put_string_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_vector_put_string() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_put_string") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_vector_put_string_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_put_string failed: unknown result");
}

int64_t TaskTrackerClient::vector_merge_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<int64_t> & value) {
    send_vector_merge_int(table_name, shard_id, cf_name, row_key, column_key, value);
    return recv_vector_merge_int();
}

void TaskTrackerClient::send_vector_merge_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<int64_t> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_merge_int", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_merge_int_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_vector_merge_int() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_merge_int") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_vector_merge_int_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_merge_int failed: unknown result");
}

int64_t TaskTrackerClient::vector_merge_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<double> & value) {
    send_vector_merge_double(table_name, shard_id, cf_name, row_key, column_key, value);
    return recv_vector_merge_double();
}

void TaskTrackerClient::send_vector_merge_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<double> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_merge_double", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_merge_double_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_vector_merge_double() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_merge_double") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_vector_merge_double_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_merge_double failed: unknown result");
}

int64_t TaskTrackerClient::vector_merge_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<std::string> & value) {
    send_vector_merge_string(table_name, shard_id, cf_name, row_key, column_key, value);
    return recv_vector_merge_string();
}

void TaskTrackerClient::send_vector_merge_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<std::string> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_merge_string", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_merge_string_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_vector_merge_string() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_merge_string") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_vector_merge_string_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_merge_string failed: unknown result");
}

int64_t TaskTrackerClient::timed_vector_put_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const int64_t time_stampe, const std::vector<int64_t> & value) {
    send_timed_vector_put_int(table_name, shard_id, cf_name, row_key, column_key, time_stampe, value);
    return recv_timed_vector_put_int();
}

void TaskTrackerClient::send_timed_vector_put_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const int64_t time_stampe, const std::vector<int64_t> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("timed_vector_put_int", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_timed_vector_put_int_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.time_stampe = &time_stampe;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_timed_vector_put_int() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("timed_vector_put_int") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_timed_vector_put_int_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "timed_vector_put_int failed: unknown result");
}

int64_t TaskTrackerClient::timed_vector_put_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const int64_t time_stampe, const std::vector<double> & value) {
    send_timed_vector_put_double(table_name, shard_id, cf_name, row_key, column_key, time_stampe, value);
    return recv_timed_vector_put_double();
}

void TaskTrackerClient::send_timed_vector_put_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const int64_t time_stampe, const std::vector<double> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("timed_vector_put_double", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_timed_vector_put_double_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.time_stampe = &time_stampe;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_timed_vector_put_double() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("timed_vector_put_double") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_timed_vector_put_double_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "timed_vector_put_double failed: unknown result");
}

int64_t TaskTrackerClient::timed_vector_put_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const int64_t time_stampe, const std::vector<std::string> & value) {
    send_timed_vector_put_string(table_name, shard_id, cf_name, row_key, column_key, time_stampe, value);
    return recv_timed_vector_put_string();
}

void TaskTrackerClient::send_timed_vector_put_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const int64_t time_stampe, const std::vector<std::string> & value) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("timed_vector_put_string", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_timed_vector_put_string_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.time_stampe = &time_stampe;
    args.value = &value;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

int64_t TaskTrackerClient::recv_timed_vector_put_string() {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("timed_vector_put_string") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    int64_t _return;
    TaskTracker_timed_vector_put_string_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        return _return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "timed_vector_put_string failed: unknown result");
}

void TaskTrackerClient::vector_get_int(std::vector<int64_t> & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key) {
    send_vector_get_int(table_name, shard_id, cf_name, row_key, column_key);
    recv_vector_get_int(_return);
}

void TaskTrackerClient::send_vector_get_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_get_int", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_get_int_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_vector_get_int(std::vector<int64_t> & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_get_int") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_vector_get_int_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_get_int failed: unknown result");
}

void TaskTrackerClient::vector_get_double(std::vector<double> & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key) {
    send_vector_get_double(table_name, shard_id, cf_name, row_key, column_key);
    recv_vector_get_double(_return);
}

void TaskTrackerClient::send_vector_get_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_get_double", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_get_double_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_vector_get_double(std::vector<double> & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_get_double") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_vector_get_double_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_get_double failed: unknown result");
}

void TaskTrackerClient::vector_get_string(std::vector<std::string> & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key) {
    send_vector_get_string(table_name, shard_id, cf_name, row_key, column_key);
    recv_vector_get_string(_return);
}

void TaskTrackerClient::send_vector_get_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("vector_get_string", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_vector_get_string_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.row_key = &row_key;
    args.column_key = &column_key;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_vector_get_string(std::vector<std::string> & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("vector_get_string") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_vector_get_string_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "vector_get_string failed: unknown result");
}

void TaskTrackerClient::scan_all_int(std::map<std::string, std::map<std::string, int64_t> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name) {
    send_scan_all_int(table_name, shard_id, cf_name);
    recv_scan_all_int(_return);
}

void TaskTrackerClient::send_scan_all_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("scan_all_int", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_scan_all_int_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_scan_all_int(std::map<std::string, std::map<std::string, int64_t> > & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("scan_all_int") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_scan_all_int_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "scan_all_int failed: unknown result");
}

void TaskTrackerClient::scan_all_double(std::map<std::string, std::map<std::string, double> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name) {
    send_scan_all_double(table_name, shard_id, cf_name);
    recv_scan_all_double(_return);
}

void TaskTrackerClient::send_scan_all_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("scan_all_double", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_scan_all_double_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_scan_all_double(std::map<std::string, std::map<std::string, double> > & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("scan_all_double") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_scan_all_double_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "scan_all_double failed: unknown result");
}

void TaskTrackerClient::scan_all_string(std::map<std::string, std::map<std::string, std::string> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name) {
    send_scan_all_string(table_name, shard_id, cf_name);
    recv_scan_all_string(_return);
}

void TaskTrackerClient::send_scan_all_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("scan_all_string", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_scan_all_string_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_scan_all_string(std::map<std::string, std::map<std::string, std::string> > & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("scan_all_string") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_scan_all_string_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "scan_all_string failed: unknown result");
}

void TaskTrackerClient::timed_scan_int(std::map<std::string, std::map<std::string, int64_t> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const int64_t time_stamp) {
    send_timed_scan_int(table_name, shard_id, cf_name, time_stamp);
    recv_timed_scan_int(_return);
}

void TaskTrackerClient::send_timed_scan_int(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const int64_t time_stamp) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("timed_scan_int", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_timed_scan_int_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.time_stamp = &time_stamp;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_timed_scan_int(std::map<std::string, std::map<std::string, int64_t> > & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("timed_scan_int") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_timed_scan_int_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "timed_scan_int failed: unknown result");
}

void TaskTrackerClient::timed_scan_double(std::map<std::string, std::map<std::string, double> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const int64_t time_stamp) {
    send_timed_scan_double(table_name, shard_id, cf_name, time_stamp);
    recv_timed_scan_double(_return);
}

void TaskTrackerClient::send_timed_scan_double(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const int64_t time_stamp) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("timed_scan_double", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_timed_scan_double_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.time_stamp = &time_stamp;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_timed_scan_double(std::map<std::string, std::map<std::string, double> > & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("timed_scan_double") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_timed_scan_double_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "timed_scan_double failed: unknown result");
}

void TaskTrackerClient::timed_scan_string(std::map<std::string, std::map<std::string, std::string> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const int64_t time_stamp) {
    send_timed_scan_string(table_name, shard_id, cf_name, time_stamp);
    recv_timed_scan_string(_return);
}

void TaskTrackerClient::send_timed_scan_string(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const int64_t time_stamp) {
    int32_t cseqid = 0;
    oprot_->writeMessageBegin("timed_scan_string", ::apache::thrift::protocol::T_CALL, cseqid);

    TaskTracker_timed_scan_string_pargs args;
    args.table_name = &table_name;
    args.shard_id = &shard_id;
    args.cf_name = &cf_name;
    args.time_stamp = &time_stamp;
    args.write(oprot_);

    oprot_->writeMessageEnd();
    oprot_->getTransport()->writeEnd();
    oprot_->getTransport()->flush();
}

void TaskTrackerClient::recv_timed_scan_string(std::map<std::string, std::map<std::string, std::string> > & _return) {

    int32_t rseqid = 0;
    std::string fname;
    ::apache::thrift::protocol::TMessageType mtype;

    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        throw x;
    }
    if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    if (fname.compare("timed_scan_string") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
    }
    TaskTracker_timed_scan_string_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();

    if (result.__isset.success) {
        // _return pointer has now been filled
        return;
    }
    throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "timed_scan_string failed: unknown result");
}

bool TaskTrackerProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
    ProcessMap::iterator pfn;
    pfn = processMap_.find(fname);
    if (pfn == processMap_.end()) {
        iprot->skip(::apache::thrift::protocol::T_STRUCT);
        iprot->readMessageEnd();
        iprot->getTransport()->readEnd();
        ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
        oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return true;
    }
    (this->*(pfn->second))(seqid, iprot, oprot, callContext);
    return true;
}

void TaskTrackerProcessor::process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.ping", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.ping");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.ping");
    }

    TaskTracker_ping_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.ping", bytes);
    }

    TaskTracker_ping_result result;
    try {
        iface_->ping(result.success);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.ping");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("ping", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.ping");
    }

    oprot->writeMessageBegin("ping", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.ping", bytes);
    }
}

void TaskTrackerProcessor::process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.create_table", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.create_table");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.create_table");
    }

    TaskTracker_create_table_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.create_table", bytes);
    }

    TaskTracker_create_table_result result;
    try {
        result.success = iface_->create_table(args.table_property);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.create_table");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("create_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.create_table");
    }

    oprot->writeMessageBegin("create_table", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.create_table", bytes);
    }
}

void TaskTrackerProcessor::process_create_cf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.create_cf", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.create_cf");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.create_cf");
    }

    TaskTracker_create_cf_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.create_cf", bytes);
    }

    TaskTracker_create_cf_result result;
    try {
        result.success = iface_->create_cf(args.table_name, args.cf_property);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.create_cf");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("create_cf", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.create_cf");
    }

    oprot->writeMessageBegin("create_cf", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.create_cf", bytes);
    }
}

void TaskTrackerProcessor::process_vector_put_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_put_int", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_put_int");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_put_int");
    }

    TaskTracker_vector_put_int_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_put_int", bytes);
    }

    TaskTracker_vector_put_int_result result;
    try {
        result.success = iface_->vector_put_int(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_put_int");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_put_int", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_put_int");
    }

    oprot->writeMessageBegin("vector_put_int", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_put_int", bytes);
    }
}

void TaskTrackerProcessor::process_vector_put_double(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_put_double", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_put_double");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_put_double");
    }

    TaskTracker_vector_put_double_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_put_double", bytes);
    }

    TaskTracker_vector_put_double_result result;
    try {
        result.success = iface_->vector_put_double(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_put_double");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_put_double", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_put_double");
    }

    oprot->writeMessageBegin("vector_put_double", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_put_double", bytes);
    }
}

void TaskTrackerProcessor::process_vector_put_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_put_string", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_put_string");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_put_string");
    }

    TaskTracker_vector_put_string_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_put_string", bytes);
    }

    TaskTracker_vector_put_string_result result;
    try {
        result.success = iface_->vector_put_string(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_put_string");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_put_string", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_put_string");
    }

    oprot->writeMessageBegin("vector_put_string", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_put_string", bytes);
    }
}

void TaskTrackerProcessor::process_vector_merge_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_merge_int", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_merge_int");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_merge_int");
    }

    TaskTracker_vector_merge_int_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_merge_int", bytes);
    }

    TaskTracker_vector_merge_int_result result;
    try {
        result.success = iface_->vector_merge_int(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_merge_int");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_merge_int", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_merge_int");
    }

    oprot->writeMessageBegin("vector_merge_int", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_merge_int", bytes);
    }
}

void TaskTrackerProcessor::process_vector_merge_double(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_merge_double", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_merge_double");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_merge_double");
    }

    TaskTracker_vector_merge_double_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_merge_double", bytes);
    }

    TaskTracker_vector_merge_double_result result;
    try {
        result.success = iface_->vector_merge_double(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_merge_double");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_merge_double", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_merge_double");
    }

    oprot->writeMessageBegin("vector_merge_double", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_merge_double", bytes);
    }
}

void TaskTrackerProcessor::process_vector_merge_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_merge_string", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_merge_string");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_merge_string");
    }

    TaskTracker_vector_merge_string_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_merge_string", bytes);
    }

    TaskTracker_vector_merge_string_result result;
    try {
        result.success = iface_->vector_merge_string(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_merge_string");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_merge_string", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_merge_string");
    }

    oprot->writeMessageBegin("vector_merge_string", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_merge_string", bytes);
    }
}

void TaskTrackerProcessor::process_timed_vector_put_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.timed_vector_put_int", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.timed_vector_put_int");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.timed_vector_put_int");
    }

    TaskTracker_timed_vector_put_int_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.timed_vector_put_int", bytes);
    }

    TaskTracker_timed_vector_put_int_result result;
    try {
        result.success = iface_->timed_vector_put_int(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.time_stampe, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.timed_vector_put_int");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("timed_vector_put_int", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.timed_vector_put_int");
    }

    oprot->writeMessageBegin("timed_vector_put_int", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.timed_vector_put_int", bytes);
    }
}

void TaskTrackerProcessor::process_timed_vector_put_double(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.timed_vector_put_double", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.timed_vector_put_double");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.timed_vector_put_double");
    }

    TaskTracker_timed_vector_put_double_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.timed_vector_put_double", bytes);
    }

    TaskTracker_timed_vector_put_double_result result;
    try {
        result.success = iface_->timed_vector_put_double(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.time_stampe, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.timed_vector_put_double");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("timed_vector_put_double", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.timed_vector_put_double");
    }

    oprot->writeMessageBegin("timed_vector_put_double", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.timed_vector_put_double", bytes);
    }
}

void TaskTrackerProcessor::process_timed_vector_put_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.timed_vector_put_string", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.timed_vector_put_string");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.timed_vector_put_string");
    }

    TaskTracker_timed_vector_put_string_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.timed_vector_put_string", bytes);
    }

    TaskTracker_timed_vector_put_string_result result;
    try {
        result.success = iface_->timed_vector_put_string(args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key, args.time_stampe, args.value);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.timed_vector_put_string");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("timed_vector_put_string", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.timed_vector_put_string");
    }

    oprot->writeMessageBegin("timed_vector_put_string", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.timed_vector_put_string", bytes);
    }
}

void TaskTrackerProcessor::process_vector_get_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_get_int", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_get_int");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_get_int");
    }

    TaskTracker_vector_get_int_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_get_int", bytes);
    }

    TaskTracker_vector_get_int_result result;
    try {
        iface_->vector_get_int(result.success, args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_get_int");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_get_int", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_get_int");
    }

    oprot->writeMessageBegin("vector_get_int", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_get_int", bytes);
    }
}

void TaskTrackerProcessor::process_vector_get_double(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_get_double", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_get_double");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_get_double");
    }

    TaskTracker_vector_get_double_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_get_double", bytes);
    }

    TaskTracker_vector_get_double_result result;
    try {
        iface_->vector_get_double(result.success, args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_get_double");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_get_double", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_get_double");
    }

    oprot->writeMessageBegin("vector_get_double", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_get_double", bytes);
    }
}

void TaskTrackerProcessor::process_vector_get_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.vector_get_string", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.vector_get_string");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.vector_get_string");
    }

    TaskTracker_vector_get_string_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.vector_get_string", bytes);
    }

    TaskTracker_vector_get_string_result result;
    try {
        iface_->vector_get_string(result.success, args.table_name, args.shard_id, args.cf_name, args.row_key, args.column_key);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.vector_get_string");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("vector_get_string", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.vector_get_string");
    }

    oprot->writeMessageBegin("vector_get_string", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.vector_get_string", bytes);
    }
}

void TaskTrackerProcessor::process_scan_all_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.scan_all_int", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.scan_all_int");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.scan_all_int");
    }

    TaskTracker_scan_all_int_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.scan_all_int", bytes);
    }

    TaskTracker_scan_all_int_result result;
    try {
        iface_->scan_all_int(result.success, args.table_name, args.shard_id, args.cf_name);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.scan_all_int");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("scan_all_int", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.scan_all_int");
    }

    oprot->writeMessageBegin("scan_all_int", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.scan_all_int", bytes);
    }
}

void TaskTrackerProcessor::process_scan_all_double(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.scan_all_double", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.scan_all_double");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.scan_all_double");
    }

    TaskTracker_scan_all_double_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.scan_all_double", bytes);
    }

    TaskTracker_scan_all_double_result result;
    try {
        iface_->scan_all_double(result.success, args.table_name, args.shard_id, args.cf_name);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.scan_all_double");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("scan_all_double", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.scan_all_double");
    }

    oprot->writeMessageBegin("scan_all_double", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.scan_all_double", bytes);
    }
}

void TaskTrackerProcessor::process_scan_all_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.scan_all_string", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.scan_all_string");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.scan_all_string");
    }

    TaskTracker_scan_all_string_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.scan_all_string", bytes);
    }

    TaskTracker_scan_all_string_result result;
    try {
        iface_->scan_all_string(result.success, args.table_name, args.shard_id, args.cf_name);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.scan_all_string");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("scan_all_string", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.scan_all_string");
    }

    oprot->writeMessageBegin("scan_all_string", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.scan_all_string", bytes);
    }
}

void TaskTrackerProcessor::process_timed_scan_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.timed_scan_int", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.timed_scan_int");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.timed_scan_int");
    }

    TaskTracker_timed_scan_int_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.timed_scan_int", bytes);
    }

    TaskTracker_timed_scan_int_result result;
    try {
        iface_->timed_scan_int(result.success, args.table_name, args.shard_id, args.cf_name, args.time_stamp);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.timed_scan_int");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("timed_scan_int", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.timed_scan_int");
    }

    oprot->writeMessageBegin("timed_scan_int", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.timed_scan_int", bytes);
    }
}

void TaskTrackerProcessor::process_timed_scan_double(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.timed_scan_double", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.timed_scan_double");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.timed_scan_double");
    }

    TaskTracker_timed_scan_double_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.timed_scan_double", bytes);
    }

    TaskTracker_timed_scan_double_result result;
    try {
        iface_->timed_scan_double(result.success, args.table_name, args.shard_id, args.cf_name, args.time_stamp);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.timed_scan_double");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("timed_scan_double", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.timed_scan_double");
    }

    oprot->writeMessageBegin("timed_scan_double", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.timed_scan_double", bytes);
    }
}

void TaskTrackerProcessor::process_timed_scan_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext) {
    void* ctx = NULL;
    if (this->eventHandler_.get() != NULL) {
        ctx = this->eventHandler_->getContext("TaskTracker.timed_scan_string", callContext);
    }
    ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TaskTracker.timed_scan_string");

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preRead(ctx, "TaskTracker.timed_scan_string");
    }

    TaskTracker_timed_scan_string_args args;
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postRead(ctx, "TaskTracker.timed_scan_string", bytes);
    }

    TaskTracker_timed_scan_string_result result;
    try {
        iface_->timed_scan_string(result.success, args.table_name, args.shard_id, args.cf_name, args.time_stamp);
        result.__isset.success = true;
    } catch (const std::exception& e) {
        if (this->eventHandler_.get() != NULL) {
            this->eventHandler_->handlerError(ctx, "TaskTracker.timed_scan_string");
        }

        ::apache::thrift::TApplicationException x(e.what());
        oprot->writeMessageBegin("timed_scan_string", ::apache::thrift::protocol::T_EXCEPTION, seqid);
        x.write(oprot);
        oprot->writeMessageEnd();
        oprot->getTransport()->writeEnd();
        oprot->getTransport()->flush();
        return;
    }

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->preWrite(ctx, "TaskTracker.timed_scan_string");
    }

    oprot->writeMessageBegin("timed_scan_string", ::apache::thrift::protocol::T_REPLY, seqid);
    result.write(oprot);
    oprot->writeMessageEnd();
    bytes = oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();

    if (this->eventHandler_.get() != NULL) {
        this->eventHandler_->postWrite(ctx, "TaskTracker.timed_scan_string", bytes);
    }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > TaskTrackerProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
    ::apache::thrift::ReleaseHandler< TaskTrackerIfFactory > cleanup(handlerFactory_);
    ::boost::shared_ptr< TaskTrackerIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
    ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new TaskTrackerProcessor(handler));
    return processor;
}
}
} // namespace

