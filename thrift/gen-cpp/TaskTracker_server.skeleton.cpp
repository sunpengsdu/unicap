// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TaskTracker.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ntu::cap;

class TaskTrackerHandler : virtual public TaskTrackerIf {
public:
    TaskTrackerHandler() {
        // Your initialization goes here
    }

    void ping(std::string& _return) {
        // Your implementation goes here
        printf("ping\n");
    }

    int64_t create_table(const TableProperty& table_property) {
        // Your implementation goes here
        printf("create_table\n");
    }

    int64_t create_cf(const std::string& table_name, const ColumnFamilyProperty& cf_property) {
        // Your implementation goes here
        printf("create_cf\n");
    }

    int64_t vector_put(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const std::vector<std::string> & value) {
        // Your implementation goes here
        printf("vector_put\n");
    }

    int64_t timely_vector_put(const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key, const int64_t time_stampe, const std::vector<std::string> & value) {
        // Your implementation goes here
        printf("timely_vector_put\n");
    }

    void vector_get(std::vector<std::string> & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const std::vector<std::string> & row_key, const std::vector<std::string> & column_key) {
        // Your implementation goes here
        printf("vector_get\n");
    }

    void scan_all(std::vector<std::vector<std::string> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name) {
        // Your implementation goes here
        printf("scan_all\n");
    }

    void scan_by_time(std::vector<std::vector<std::string> > & _return, const std::string& table_name, const int64_t shard_id, const std::string& cf_name, const int64_t time_stamp) {
        // Your implementation goes here
        printf("scan_by_time\n");
    }

};

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<TaskTrackerHandler> handler(new TaskTrackerHandler());
    shared_ptr<TProcessor> processor(new TaskTrackerProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

